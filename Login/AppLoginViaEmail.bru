meta {
  name: AppLoginViaEmail
  type: http
  seq: 1
}

post {
  url: {{URL}}/users/v2/login
  body: json
  auth: none
}

headers {
  appid: 3a97b932a9d449c981b595
  apiversion: 3.0.0
  appversion: {{appversion}}
}

body:json {
  {
    "Email": "test+r1@moneyboxapp.com",
    "Password": "P455word12",
    "Idfa": "0364caf7-bf70-4e51-b24c-8bd162e05589",
    "DeviceIdentifier": "SM-G955F",
    "UniqueDeviceIdentifier": "24fa9c58482f4e88"
  }
}

assert {
  res.status: eq 200
  res.body.User.MoneyboxRegistrationStatus: eq IsComplete
}

tests {
  const responseBody = res.getBody();
  
  test("Verify user is Personal Investor", function () {
    expect(responseBody.User.UserType).equals("Investor");
    expect(responseBody.Session.Profiles).to.be.an('array').lengthOf(1);
    expect(responseBody.Session.Profiles[0].ProfileType).equals("Personal");
  })
  
  bru.setVar("BearerToken", responseBody.Session.BearerToken);
  
  
  // Schema validation test
  const Ajv = require('ajv');
  
  const schema = {
    "type": "object",
    "properties": {
      "User": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string"
          },
          "UserType": {
            "type": "string"
          },
          "HasVerifiedEmail": {
            "type": "boolean"
          },
          "IsPinSet": {
            "type": "boolean"
          },
          "MoneyboxRegistrationStatus": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "RestrictedDevice": {
            "type": "boolean"
          },
          "EmailTwoFactorEnabled": {
            "type": "boolean"
          },
          "Cohort": {
            "type": "integer"
          }
        },
        "required": [
          "UserId",
          "UserType",
          "HasVerifiedEmail",
          "IsPinSet",
          "MoneyboxRegistrationStatus",
          "Email",
          "RestrictedDevice",
          "EmailTwoFactorEnabled",
          "Cohort"
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "BearerToken": {
            "type": "string"
          },
          "ExternalSessionId": {
            "type": "string"
          },
          "SessionExternalId": {
            "type": "string"
          },
          "ExpiryInSeconds": {
            "type": "integer"
          },
          "Profiles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "UserId": {
                  "type": "string"
                },
                "ProfileType": {
                  "type": "string"
                },
                "Name": {
                  "type": "string"
                }
              },
              "required": [
                "UserId",
                "ProfileType",
                "Name"
              ]
            }
          }
        },
        "required": [
          "BearerToken",
          "ExternalSessionId",
          "SessionExternalId",
          "ExpiryInSeconds",
          "Profiles"
        ]
      },
      "Incentives": {
        "type": "object"
      }
    },
    "required": [
      "User",
      "Session",
      "Incentives"
    ]
  };
  
  const ajv = new Ajv({ allErrors: true }); // Collect all validation errors
  const validate = ajv.compile(schema);
  const valid = validate(responseBody);
  
  test("Verify the schema is valid", function () {
    expect(valid, "Schema validation failed. Errors: " + JSON.stringify(validate.errors)).to.be.true;
  })
}
